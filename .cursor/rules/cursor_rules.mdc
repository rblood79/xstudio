---
description: Project-specific guidelines for creating and maintaining Cursor rule files in xstudio.
globs: .cursor/rules/*.mdc
alwaysApply: true
---

- **Required Rule Structure:**
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **File References:**
  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
  - Example: [ai-rule.mdc](mdc:.cursor/rules/ai-rule.mdc) or [dev_workflow.mdc](mdc:.cursor/rules/dev_workflow.mdc) for rule references
  - Example: [App.tsx](mdc:src/App.tsx) or [tailwind.config.ts](mdc:tailwind.config.ts) for code references

- **Code Examples:**
  - Use language-specific code blocks
  ```tsx
  // ✅ DO: Show good examples
  export function Greeting({name}: {name: string}) {
    return <div className="text-lg">Hello {name}</div>;
  }

  // ❌ DON'T: Show anti-patterns
  export function BadGreeting(props: any) {
    return <span>Hello {props.name}</span>;
  }
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code in `src/` or configuration files when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from the actual codebase (e.g., components in `src/` or config files)
  - Remove outdated patterns
  - Cross-reference related rules such as [dev_workflow.mdc](mdc:.cursor/rules/dev_workflow.mdc)

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules 
